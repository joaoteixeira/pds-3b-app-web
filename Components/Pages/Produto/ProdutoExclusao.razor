@page "/produtos/{Id:int}/excluir"
@rendermode InteractiveServer

@using AppWeb.Models;
@inject ProdutoDAO produtoDAO;
@inject NavigationManager Navigation;

<PageTitle>Produtos</PageTitle>

<h1 class="text-xl font-semibold text-gray-800 dark:text-gray-100 mb-6">Exclusão de Produto</h1>

@if (erro != string.Empty)
{
  <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
    <strong class="font-bold">Erro!</strong>
    <span class="block sm:inline">@erro</span>
  </div>
}


<EditForm Model="produto" OnSubmit="Excluir">
  <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
    <strong class="font-bold">Atenção!</strong>
    <span class="block sm:inline">Esta ação não pode ser desfeita.</span>


    <p class="text-lg">Tem certeza que deseja excluir o produto <strong>@produto.Nome</strong>?</p>
  </div>


  <button type="submit" class="bg-red-500 text-white px-4 py-2 rounded mt-2">Excluir</button>
  <a href="/produtos" class="bg-gray-500 text-white px-4 py-2 rounded mt-2">Cancelar</a>

</EditForm>

@code {

  private string erro = string.Empty;

  [Parameter]
  public int Id { get; set; }

  [SupplyParameterFromForm]
  private Produto produto { get; set; } = new();

  protected override void OnInitialized()
  {
    var _produto = produtoDAO.BuscarPorId(Id);

    if (_produto != null)
    {
      produto = _produto;
    }
    else
    {
      erro = "Produto não encontrado.";
    }
  }

  private void Excluir()
  {
    try
    {
      produtoDAO.Excluir(produto.Id);

      Navigation.NavigateTo("/produtos");
    }
    catch (Exception ex)
    {
      erro = $"Erro ao excluir o produto: {ex.Message}";
    }

  }
}